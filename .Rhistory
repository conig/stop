message(names(sources)[place])
if(open) shell.exec(names(sources)[place])
find_fn = function(fn, folder = getwd(), open = T) {
files = list.files(path = folder,recursive = T, pattern = "[rR]$")
sources = lapply(files, function(e) {
s_env = new.env()
source(e[[1]], local = s_env)
functions = ls(envir = s_env)[sapply(s_env, class) == "function"]
})
names(sources) = files
place = unlist(sapply(sources, function(w) which(fn %in% w)))
message(names(sources)[place])
if(open) shell.exec(names(sources)[place])
}
find_fn("assign_args")
files
out = names(sources)[place]
out
shell.exec(out)
file.exists(out)
files
files[files == out]
shell.exec(files[files == out])
shell.exec(files[files == out])
shell.exec(files[files == out])
shell.exec(files[files == out])
shell.exec(files[files == out])
shell.exec(files[files == out])
shell.exec(files[files == out])
shell.exec(files[files == out])
shell.exec(files[files == out])
find_fn("check_names.R")
find_fn("check_names")
fn = "check_names"
files = list.files(path = folder,recursive = T, pattern = "[rR]$")
sources = lapply(files, function(e) {
s_env = new.env()
source(e[[1]], local = s_env)
functions = ls(envir = s_env)[sapply(s_env, class) == "function"]
})
names(sources) = files
place = unlist(sapply(sources, function(w) which(fn %in% w)))
place
out = names(sources)[place]
out
names(sources)
place = unlist(sapply(sources, function(w) which(fn %in% w)))
place
file_name = names(unlist(sapply(sources, function(w) which(fn %in% w))))
file_name
message(file_name)
message(file_name)
if(open) shell.exec(file_name)
find_fn = function(fn, folder = getwd(), open = T) {
files = list.files(path = folder,recursive = T, pattern = "[rR]$")
sources = lapply(files, function(e) {
s_env = new.env()
source(e[[1]], local = s_env)
functions = ls(envir = s_env)[sapply(s_env, class) == "function"]
})
names(sources) = files
file_name = names(unlist(sapply(sources, function(w) which(fn %in% w))))
message(file_name)
if(open) shell.exec(file_name)
}
find_fn("check_names")
system.file(file_name)
system.file(file_name, getwd())
file.path(file_name)
shell.exec(file.path(file_name))
files = list.files(path = folder,recursive = T, pattern = "[rR]$", full.names = T)
sources = lapply(files, function(e) {
s_env = new.env()
source(e[[1]], local = s_env)
functions = ls(envir = s_env)[sapply(s_env, class) == "function"]
})
names(sources) = files
file_name = names(unlist(sapply(sources, function(w) which(fn %in% w))))
file_name
message(file_name)
if(open) shell.exec(file_name)
find_fn = function(fn, folder = getwd(), open = T) {
files = list.files(path = folder,recursive = T, pattern = "[rR]$", full.names = T)
sources = lapply(files, function(e) {
s_env = new.env()
source(e[[1]], local = s_env)
functions = ls(envir = s_env)[sapply(s_env, class) == "function"]
})
names(sources) = files
file_name = names(unlist(sapply(sources, function(w) which(fn %in% w))))
message(file_name)
if(open) shell.exec(file_name)
}
if(open) shell.exec(file_name)
find_fn("check_names")
find_fn("check_names")
find_fn = function(fn, folder = getwd(), open = T) {
files = list.files(path = folder,recursive = T, pattern = "[rR]$", full.names = T)
sources = lapply(files, function(e) {
s_env = new.env()
source(e[[1]], local = s_env)
functions = ls(envir = s_env)[sapply(s_env, class) == "function"]
})
names(sources) = files
file_name = names(unlist(sapply(sources, function(w) which(w %in% fn))))
message(file_name)
if(open) shell.exec(file_name)
}
find_fn("check_names")
find_fn("check_names")
find_fn = function(fn, folder = getwd(), open = T) {
files = list.files(path = folder,recursive = T, pattern = "[rR]$", full.names = T) # all r files in dir
sources = lapply(files, function(e) { # create list
s_env = new.env()                   # of new environments
source(e[[1]], local = s_env)       # which contain the sources
functions = ls(envir = s_env)[sapply(s_env, class) == "function"] # filter out non-functions
})
names(sources) = files # name each element with the file it was taken from
file_name = names(unlist(sapply(sources, function(w) which(w %in% fn)))) # get the path containing the fn
message(file_name) # tell the user the file name
if(open) shell.exec(file_name) # open the file, (windows only)
}
find_fn("assign_args")
library(stop)
library(stop)
efa(mtcars)
factanal(mtcars, 5)
princomp(mtcars)
summary(princomp(mtcars))
library(stop)
stop::find_fn("find_fn")
stop:::find_fn("find_fn")
library(stop)
find_fn(''
find_fn("find_fn")
stop::find_fn("find_fn")
find_fn = function(fn, folder = getwd(), open = T) {
files = list.files(path = folder,recursive = T, pattern = "//.[rR]$", full.names = T) # all r files in dir
sources = lapply(files, function(e) { # create list
s_env = new.env()                   # of new environments
source(e[[1]], local = s_env)       # which contain the sources
functions = ls(envir = s_env)[sapply(s_env, class) == "function"] # filter out non-functions
})
names(sources) = files # name each element with the file it was taken from
file_name = names(unlist(sapply(sources, function(w) which(w %in% fn)))) # get the path containing the fn
message(file_name) # tell the user the file name
if(open) shell.exec(file_name) # open the file, (windows only)
}
library(stop)
stop:::find_fn
library(stop)
stop::find_fn("find_fn")
"\.[rR]$"
"\\.[rR]$"
find_fn = function(fn, folder = getwd(), open = T) {
files = list.files(path = folder,recursive = T, pattern = "\\.[rR]$", full.names = T) # all r files in dir
sources = lapply(files, function(e) { # create list
s_env = new.env()                   # of new environments
source(e[[1]], local = s_env)       # which contain the sources
functions = ls(envir = s_env)[sapply(s_env, class) == "function"] # filter out non-functions
})
names(sources) = files # name each element with the file it was taken from
file_name = names(unlist(sapply(sources, function(w) which(w %in% fn)))) # get the path containing the fn
message(file_name) # tell the user the file name
if(open) shell.exec(file_name) # open the file, (windows only)
}
find_fn("find_fn")
library(stop)
library(stop)
find_fn("find_fn")
?source
message("searching in ", getwd(),"...")
files = list.files(path = folder,recursive = T, pattern = "\\.[rR]$", full.names = T) # all r files in dir
folder = getwd()
message("searching in ", getwd(),"...")
files = list.files(path = folder,recursive = T, pattern = "\\.[rR]$", full.names = T) # all r files in dir
files
sources = lapply(files, function(e) { # create list
s_env = new.env()                   # of new environments
source(e[[1]], local = s_env, evaluated = F)       # which contain the sources
functions = ls(envir = s_env)[sapply(s_env, class) == "function"] # filter out non-functions
})
sources = lapply(files, function(e) { # create list
s_env = new.env()                   # of new environments
source(e[[1]], local = s_env, exprs = T)       # which contain the sources
functions = ls(envir = s_env)[sapply(s_env, class) == "function"] # filter out non-functions
})
source(e[[1]], local = s_env, evaluated = F)       # which contain the sources
source
?getParseData()
files
getParseData(files[1])
getParseData(readLines(files[1]))
readLines(files[1])
parse(files[1])
is.function(parse(files[1]))
getParseData(parse(files[1]))
parse_dat =  getParseData(parse(e[[1]])
# which contain the sources
functions = ls(envir = s_env)[sapply(s_env, class) == "function"] # filter out non-functions
})
e
e = files[1]
parse_dat =  getParseData(parse(e[[1]])
# which contain the sources
functions = ls(envir = s_env)[sapply(s_env, class) == "function"] # filter out non-functions
})
parse_dat =  getParseData(parse(e[[1]]))
parse_dat
parse_dat[parse_dat$token == "SYMBOL_FUNCTION_CALL"]
parse_dat[which(parse_dat$token == "SYMBOL_FUNCTION_CALL")]
parse_dat[which(parse_dat$token == "SYMBOL_FUNCTION_CALL"),"text"]
parse_dat
parse_dat[which(parse_dat$token == "SYMBOL_FUNCTION_CALL"),]
dat = parse_dat[which(parse_dat$token == "SYMBOL_FUNCTION_CALL"),]
dat$delete = NA
dat$text[i] == "{"
i = 1
dat$text[i] == "{"
for(i in seq_along(dat$delete)){
dat$delete[i] = delete
if(dat$text[i] == "{") delete = T
if(dat$text[i] == "}") delete = F
}
delete = F
dat$delete = NA
for(i in seq_along(dat$delete)){
dat$delete[i] = delete
if(dat$text[i] == "{") delete = T
if(dat$text[i] == "}") delete = F
}
dat
parse_dat =  getParseData(parse(e[[1]]))
dat = parse_dat[which(parse_dat$token == "SYMBOL_FUNCTION_CALL"),]
delete = F
dat$delete = NA
for(i in seq_along(dat$delete)){
dat$delete[i] = delete
if(dat$text[i] == "{") delete = T
if(dat$text[i] == "}") delete = F
}
dat
parse_dat =  getParseData(parse(e[[1]]))
parse_dat =  getParseData(parse(e[[1]]))
delete = F
parse_dat$delete = NA
for(i in seq_along(parse_dat$delete)){
parse_dat$delete[i] = delete
if(parse_dat$text[i] == "{") delete = T
if(parse_dat$text[i] == "}") delete = F
}
parse
parse_dat
dat = dat[!dat$delete,"text"]
dat
parse_dat =  getParseData(parse(e[[1]]))
delete = F
parse_dat$delete = NA
for(i in seq_along(parse_dat$delete)){
parse_dat$delete[i] = delete
if(parse_dat$text[i] == "{") delete = T
if(parse_dat$text[i] == "}") delete = F
}
dat = parse_dat[which(parse_dat$token == "SYMBOL_FUNCTION_CALL"),]
dat
dat = dat[!dat$delete,"text"]
dat
files[1]
sources = lapply(files, function(e) { # create list
parse_dat =  getParseData(parse(e[[1]]))
delete = F
parse_dat$delete = NA
for(i in seq_along(parse_dat$delete)){
parse_dat$delete[i] = delete
if(parse_dat$text[i] == "{") delete = T
if(parse_dat$text[i] == "}") delete = F
}
dat = parse_dat[which(parse_dat$token == "SYMBOL_FUNCTION_CALL"),]
dat = dat[!dat$delete,"text"]
# which contain the sources
functions = ls(envir = s_env)[sapply(s_env, class) == "function"] # filter out non-functions
})
delete = F
parse_dat$delete = NA
for(i in seq_along(parse_dat$delete)){
parse_dat$delete[i] = delete
if(parse_dat$text[i] == "{") delete = T
if(parse_dat$text[i] == "}") delete = F
}
dat = parse_dat[which(parse_dat$token == "SYMBOL_FUNCTION_CALL"),]
dat
parse_dat =  getParseData(parse(e[[1]]))
delete = F
parse_dat$delete = NA
parse_dat
parse_dat[parse_dat$token == "SYMBOL",]
parse_dat[!duplicated(parse_dat$parent),]
parse_dat[!duplicated(parse_dat$parent) & parse_dat$terminal,]
parse_dat[!duplicated(parse_dat$parent) & parse_dat$terminal & parse_dat$token == "SYMBOL",]
sys.source(files[1])
sys.source(files[1], keep.source = T)
x = sys.source(files[1], keep.source = T)
x
source.with.encoding(files[1])
files[1]
findFunction("find_fn")
source(files[1], eval = F)
?source(files[1], eval = F)
?source(files[1], echo = T)
source(files[1], echo = T)
source
sourcetools::read_lines(files[1])
file_parsed = parse(filename)
functions = Filter(is_function, file_parsed)
function_names = unlist(Map(function_name, functions))
filename = files[1]
is_function = function (expr) {
if (! is_assign(expr))
return(FALSE)
value = expr[[3]]
is.call(value) && as.character(value[[1]]) == 'function'
}
function_name = function (expr)
as.character(expr[[2]])
is_assign = function (expr)
is.call(expr) && as.character(expr[[1]]) %in% c('=', '<-', 'assign')
file_parsed = parse(filename)
file_parsed
functions = Filter(is_function, file_parsed)
functions
file_parsed
is_function = function (expr) {
if (! is_assign(expr))
return(FALSE)
value = expr[[3]]
is.call(value) && as.character(value[[1]]) == 'function'
}
is_function(file_parsed)
function_name = function (expr)
as.character(expr[[2]])
is_assign = function (expr)
is.call(expr) && as.character(expr[[1]]) %in% c('=', '<-', 'assign')
file_parsed = parse(filename)
functions = Filter(is_function, file_parsed)
function_names = unlist(Map(function_name, functions))
function_names
?Map
get_functions(filename){
is_function = function (expr) {
if (! is_assign(expr))
return(FALSE)
value = expr[[3]]
is.call(value) && as.character(value[[1]]) == 'function'
}
function_name = function (expr)
as.character(expr[[2]])
is_assign = function (expr)
is.call(expr) && as.character(expr[[1]]) %in% c('=', '<-', 'assign')
file_parsed = parse(filename)
functions = Filter(is_function, file_parsed)
function_names = unlist(Map(function_name, functions))
return(function_names)
}
is_function = function (expr) {
if (!is_assign(expr))
return(FALSE)
value = expr[[3]]
is.call(value) && as.character(value[[1]]) == 'function'
}
is_assign = function (expr){
is.call(expr) &&
as.character(expr[[1]]) %in% c('=', '<-', 'assign')
}
file_parsed = parse(filename)
functions = Filter(is_function, file_parsed)
function_names = unlist(Map(function_name, functions))
get_functions(filename) {
is_function = function (expr) {
if (!is_assign(expr))
return(FALSE)
value = expr[[3]]
is.call(value) && as.character(value[[1]]) == 'function'
}
function_name = function (expr){
as.character(expr[[2]])
}
is_assign = function (expr){
is.call(expr) &&
as.character(expr[[1]]) %in% c('=', '<-', 'assign')
}
file_parsed = parse(filename)
functions = Filter(is_function, file_parsed)
function_names = unlist(Map(function_name, functions))
return(function_names)
}
get_functions(filename) {
is_function = function (expr) {
if (!is_assign(expr))
return(FALSE)
value = expr[[3]]
is.call(value) && as.character(value[[1]]) == 'function'
}
function_name = function (expr){
as.character(expr[[2]])
}
is_assign = function (expr){
is.call(expr) &&
as.character(expr[[1]]) %in% c('=', '<-', 'assign')
}
file_parsed = parse(filename)
functions = Filter(is_function, file_parsed)
function_names = unlist(Map(function_name, functions))
return(function_names)
}
get_functions = function(filename) {
is_function = function (expr) {
if (!is_assign(expr))
return(FALSE)
value = expr[[3]]
is.call(value) && as.character(value[[1]]) == 'function'
}
function_name = function (expr){
as.character(expr[[2]])
}
is_assign = function (expr){
is.call(expr) &&
as.character(expr[[1]]) %in% c('=', '<-', 'assign')
}
file_parsed = parse(filename)
functions = Filter(is_function, file_parsed)
function_names = unlist(Map(function_name, functions))
return(function_names)
}
get_functions(files[1])
get_functions = function(filename) {
is_function = function (expr) {
if (!is_assign(expr))
return(FALSE)
value = expr[[3]]
is.call(value) && as.character(value[[1]]) == 'function'
}
function_name = function (expr){
as.character(expr[[2]])
}
is_assign = function (expr){
is.call(expr) &&
as.character(expr[[1]]) %in% c('=', '<-', 'assign')
}
file_parsed = parse(filename)
functions = Filter(is_function, file_parsed)
function_names = unlist(Map(function_name, functions))
return(function_names)
}
get_functions(files[1])
sources = lapply(files, function(e) { # create list
get_functions(e[[1]])
# filter out non-functions
})
names(sources) = files # name each element with the file it was taken from
sources
file_name = names(unlist(sapply(sources, function(w) which(w %in% fn)))) # get the path containing the fn
fn = "check_names"
file_name = names(unlist(sapply(sources, function(w) which(w %in% fn)))) # get the path containing the fn
file_name
message(file_name) # tell the user the file name
if(open) shell.exec(file_name) # open the file, (windows only)
file_parsed = parse(filename)
file_parsed
functions = Filter(is_function, file_parsed)
functions
is_function(file_parsed)
?Filter
Filter(is_function, file_parsed)
functions = Filter(is_function, file_parsed)
functions
function_names = unlist(Map(function_name, functions))
function_names
is_function(file_parsed)
library(stop)
message(file_name) # tell the user the file name
message("\n")
library(stop)
dplyr::`%>%`
library(stop)
library(stop)
package = "msemtools"
x = as.list(getNamespace(package))
x
lapply(x, class)
lapply(x, class) == "function"
x[lapply(x, class) == "function"]
x = x[lapply(x, class) == "function"]
?cat
x
x
x = as.list(getNamespace(package))
x = x[lapply(x, class) == "function"]
x
paste(x, collapse = "\n")
library(stop)
library(stop)
shell("git add .")
shell('git add . & git commit -m "big update" & git push')
command = glue::glue('git add . & git commit -m "{m}" & {push}')
library(stop)
stop::update_git("add update git (from update git)")
library(stop)
stop::update_git("add update git (from update git)")
library(stop)
stop::update_git("reduce whitespace")
library(stop)
library(stop)
